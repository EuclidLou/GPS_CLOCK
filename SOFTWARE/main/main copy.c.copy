#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include "driver/gpio.h"
#include "driver/uart.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "sys/time.h"
#include "esp_log.h"
#include "sdkconfig.h"
#include "driver/gptimer.h"
#include "clock_gpio.h"
#include "main.h"

// QueueHandle_t time_queue_s;
// QueueHandle_t time_queue_m;
// QueueHandle_t time_queue_h;
// QueueHandle_t date_queue_y;
// QueueHandle_t date_queue_m;
// QueueHandle_t date_queue_d;
QueueHandle_t mode_queue;

void Atask(void *pvParameters) {
    // uint16_t nowtime_s = 0;
    // uint16_t nowtime_m = 0;
    // uint16_t nowtime_h = 0;
    // uint16_t nowdate_y = 0;
    // uint16_t nowdate_m = 0;
    // uint16_t nowdate_d = 0;
    uint16_t mode = 0;
    time_t trans_time_sec;
    struct tm *date_and_time;

    for(;;) {
        xQueuePeek(mode_queue, &mode, 0);
        time(&trans_time_sec);
        date_and_time = localtime(&trans_time_sec);

        if(mode == 0) {
            // xQueuePeek(time_queue_h, &nowtime_h, 0);
            // show_num((nowtime_h%100)/10, 0);
            // show_num((nowtime_h%10), 1);
            // xQueuePeek(time_queue_m, &nowtime_m, 0);
            // show_num((nowtime_m%100)/10, 2);
            // show_num((nowtime_m%10), 3);
            // xQueuePeek(time_queue_s, &nowtime_s, 0);
            // show_num((nowtime_s%100)/10, 4);
            // show_num((nowtime_s%10), 5);

            show_num((date_and_time->tm_hour%100)/10, 0);
            show_num((date_and_time->tm_hour%10), 1);
            show_num((date_and_time->tm_min%100)/10, 2);
            show_num((date_and_time->tm_min%10), 3);
            show_num((date_and_time->tm_sec%100)/10, 4);
            show_num((date_and_time->tm_sec%10), 5);
        }
        else if (mode == 1)
        {
            // xQueuePeek(date_queue_y, &nowdate_y, 0);
            // show_num((nowdate_y%100)/10, 0);
            // show_num((nowdate_y%10), 1);
            // xQueuePeek(date_queue_m, &nowdate_m, 0);
            // show_num((nowdate_m%100)/10, 2);
            // show_num((nowdate_m%10), 3);
            // xQueuePeek(date_queue_d, &nowdate_d, 0);
            // show_num((nowdate_d%100)/10, 4);
            // show_num((nowdate_d%10), 5);

            show_num((date_and_time->tm_year%100)/10, 0);
            show_num((date_and_time->tm_year%10), 1);
            show_num((date_and_time->tm_mon%100)/10, 2);
            show_num((date_and_time->tm_mon%10), 3);
            show_num((date_and_time->tm_mday%100)/10, 4);
            show_num((date_and_time->tm_mday%10), 5);
            ESP_LOGI("RTC", "%d/%d/%d\r\n", date_and_time->tm_year, date_and_time->tm_mon, date_and_time->tm_mday);
        }
         
    }
}

void Btask(void *pvParameters) {
    TickType_t lastwaketime;
    lastwaketime = xTaskGetTickCount();
    // uint16_t nowtime_s = 0;
    // uint16_t nowtime_m = 0;
    // uint16_t nowtime_h = 0;
    // uint16_t nowdate_y = 0;
    // uint16_t nowdate_m = 0;
    // uint16_t nowdate_d = 0;
    
    struct tm date_and_time;
    date_and_time.tm_sec = 0;
    date_and_time.tm_min = 0;
    date_and_time.tm_hour= 0;
    date_and_time.tm_year= 0;
    date_and_time.tm_mon = 0;
    date_and_time.tm_mday= 0;
    date_and_time.tm_isdst= -1;

    uint16_t mode = 0;

    // xQueueSendToBack(time_queue_h, &nowtime_h, 0);
    // xQueueSendToBack(time_queue_m, &nowtime_m, 0);
    // xQueueSendToBack(time_queue_s, &nowtime_s, 0);
    // xQueueSendToBack(date_queue_y, &nowdate_y, 0);
    // xQueueSendToBack(date_queue_m, &nowdate_m, 0);
    // xQueueSendToBack(date_queue_d, &nowdate_d, 0);

    xQueueSendToBack(mode_queue, &mode, 0);

    uint16_t trash = 0;
    int counta = 1;
    int countb = 1;
    int init_done = 0;
    uint8_t data[1024];
    uint8_t time_data[6];
    uint8_t date_data[6];
    int length = 1024;

    for(int i=60; i>0; i--) { // initialize the time table at the reboot.
        length = uart_read_bytes(UART_NUM_1, data, length, 1000);
        // printf("%s\r\n", data);
        for(int pos=0; pos<1000; pos++) {
            if((data[pos] == '$') && (data[pos+1] == 'G') && (data[pos+2] == 'N') && (data[pos+3] == 'Z') && (data[pos+4] == 'D') && (data[pos+5] == 'A') && (data[pos+6] == ',') && (data[pos+7] < 58) && (data[pos+8] > 47)) {
                // get current time
                for(int i=0; i<sizeof(time_data); i++) {
                    time_data[i] = data[pos + 7 + i];
                }
                
                // get current date
                date_data[0] = data[pos + 18];
                date_data[1] = data[pos + 19];
                date_data[2] = data[pos + 21];
                date_data[3] = data[pos + 22];
                date_data[4] = data[pos + 26];
                date_data[5] = data[pos + 27];
                // nowdate_y = (date_data[5]-48) + (10 * (date_data[4]-48));
                // nowdate_m = (date_data[3]-48) + (10 * (date_data[2]-48));
                // nowdate_d = (date_data[1]-48) + (10 * (date_data[0]-48));
                // nowtime_s = (time_data[5]-48) + (10 * (time_data[4]-48));
                // nowtime_m = (time_data[3]-48) + (10 * (time_data[2]-48));
                // nowtime_h = ((time_data[1]-48) + (10 * (time_data[0]-48)) + 8) % 24;

                date_and_time.tm_year = (date_data[5]-48) + (10 * (date_data[4]-48));
                date_and_time.tm_mon = (date_data[3]-48) + (10 * (date_data[2]-48))-1;
                date_and_time.tm_mday = (date_data[1]-48) + (10 * (date_data[0]-48));
                date_and_time.tm_sec = (time_data[5]-48) + (10 * (time_data[4]-48));
                date_and_time.tm_min = (time_data[3]-48) + (10 * (time_data[2]-48));
                date_and_time.tm_hour = (time_data[1]-48) + (10 * (time_data[0]-48));

                time_t trans_time_sec = mktime(&date_and_time);
                struct timeval val = {.tv_sec = trans_time_sec, .tv_usec = 0};
                struct timezone zone = {.tz_minuteswest = -482, .tz_dsttime = DST_NONE};
                // setenv("TZ", "CST-8", 1);
                settimeofday(&val, &zone);

                init_done = 1;
                break;
            }
        }
        if(init_done == 1) {break;}
        vTaskDelayUntil(&lastwaketime, 1000);
    }
    
    for(;;) {
        counta ++;
        if(counta == 1000) { // this loop perform every 1s
            counta = 1;
            countb ++;

            // xQueueReceive(time_queue_h, &trash, 0);
            // xQueueReceive(time_queue_m, &trash, 0);
            // xQueueReceive(time_queue_s, &trash, 0);
            // xQueueReceive(date_queue_y, &trash, 0);
            // xQueueReceive(date_queue_m, &trash, 0);
            // xQueueReceive(date_queue_d, &trash, 0);
            // nowtime_s ++;
            // if(nowtime_s >= 60) {
            //     nowtime_s = 0;
            //     nowtime_m ++;
            //     if(nowtime_m >= 60) {
            //         nowtime_m = 0;
            //         nowtime_h ++;
            //         if(nowtime_h >= 24) {
            //             nowtime_h = 0;
            //         }
            //     }
            // }

            if(countb >= 65535) { // try to correct the time every 65535s
                countb = 1;
                length = uart_read_bytes(UART_NUM_1, data, length, 1000);
                for(int pos=0; pos<1000; pos++) {
                    if((data[pos] == '$') && (data[pos+1] == 'G') && (data[pos+2] == 'N') && (data[pos+3] == 'Z') && (data[pos+4] == 'D') && (data[pos+5] == 'A') && (data[pos+6] == ',') && (data[pos+7] < 58) && (data[pos+8] > 47)) {
                        for(int i=0; i<sizeof(time_data); i++) {
                            time_data[i] = data[pos + 7 + i];
                        }
                        date_data[0] = data[pos + 18];
                        date_data[1] = data[pos + 19];
                        date_data[2] = data[pos + 22];
                        date_data[3] = data[pos + 23];
                        date_data[4] = data[pos + 26];
                        date_data[5] = data[pos + 27];
                        // nowdate_y = (date_data[5]-48) + (10 * (date_data[4]-48));
                        // nowdate_m = (date_data[3]-48) + (10 * (date_data[2]-48));
                        // nowdate_d = (date_data[1]-48) + (10 * (date_data[0]-48));
                        // nowtime_s = (time_data[5]-48) + (10 * (time_data[4]-48));
                        // nowtime_m = (time_data[3]-48) + (10 * (time_data[2]-48));
                        // nowtime_h = ((time_data[1]-48) + (10 * (time_data[0]-48)) + 8) % 24;
                        break;
                    }
                }
            }

            // xQueueSendToBack(time_queue_h, &nowtime_h, 0);
            // xQueueSendToBack(time_queue_m, &nowtime_m, 0);
            // xQueueSendToBack(time_queue_s, &nowtime_s, 0);
            // xQueueSendToBack(date_queue_y, &nowdate_y, 0);
            // xQueueSendToBack(date_queue_m, &nowdate_m, 0);
            // xQueueSendToBack(date_queue_d, &nowdate_d, 0);
        }
        vTaskDelayUntil(&lastwaketime, 1);
    }
}

void Ctask(void *pvParameters) {}

void app_main(void)
{
    gpio_config_t config_gpio_out = {
        .pin_bit_mask = (1ULL << PIN_NUM_SH) | (1ULL << PIN_NUM_ST) | (1ULL << PIN_NUM_DS),
        .mode = GPIO_MODE_OUTPUT,
        .pull_down_en = GPIO_PULLDOWN_DISABLE,
        .pull_up_en = GPIO_PULLUP_DISABLE,
        .intr_type = GPIO_INTR_DISABLE,
    };
    ESP_ERROR_CHECK(gpio_config(&config_gpio_out));

    gpio_config_t config_gpio_in = {
        .pin_bit_mask = (1ULL << PIN_NUM_KEY0) | (1ULL << PIN_NUM_KEY1) | (1ULL << PIN_NUM_KEY2),
        .mode = GPIO_MODE_INPUT,
        .pull_down_en = GPIO_PULLDOWN_DISABLE,
        .pull_up_en = GPIO_PULLUP_DISABLE,
        .intr_type = GPIO_INTR_DISABLE,
    };
    ESP_ERROR_CHECK(gpio_config(&config_gpio_in));

    uart_config_t uart_config = {
        .baud_rate = 9600,
        .data_bits = UART_DATA_8_BITS,
        .parity = UART_PARITY_DISABLE,
        .stop_bits = UART_STOP_BITS_1,
        .flow_ctrl = UART_HW_FLOWCTRL_DISABLE,
        .source_clk = UART_SCLK_DEFAULT,
    };
    ESP_ERROR_CHECK(uart_param_config(UART_NUM_1, &uart_config));
    ESP_ERROR_CHECK(uart_set_pin(UART_NUM_1, PIN_NUM_TX, PIN_NUM_RX, -1, -1));
    int uart_buffer_size = (1024 * 4);
    QueueHandle_t uart_queue;
    ESP_ERROR_CHECK(uart_driver_install(UART_NUM_1, uart_buffer_size, \
                                        uart_buffer_size, 10, &uart_queue, 0));


    

    // time_queue_s = xQueueCreate(1, sizeof(uint16_t));
    // time_queue_m = xQueueCreate(1, sizeof(uint16_t));
    // time_queue_h = xQueueCreate(1, sizeof(uint16_t));
    // date_queue_y = xQueueCreate(1, sizeof(uint16_t));
    // date_queue_m = xQueueCreate(1, sizeof(uint16_t));
    // date_queue_d = xQueueCreate(1, sizeof(uint16_t));
    mode_queue   = xQueueCreate(1, sizeof(uint16_t));
    xTaskCreate(Atask, "SHOW THE NUM", 65536, NULL, 1, NULL);
    xTaskCreate(Btask, "GET THE TIME", 65536, NULL, 2, NULL);
    // xTaskCreate(Ctask, "GET THE INTER", 65536, NULL, 3, NULL);

    // for(;;) {
    //     for(int j=0; j<10; j++) {
    //         for(int i = 2000; i>0; i--){
    //             for(int k=0; k<6; k++){
    //             show_num(j, k);
    //         }
    //         }
    //     }
    // }
    // vTaskDelay(1000);

        
    // ESP_ERROR_CHECK(uart_get_buffered_data_len(UART_NUM_1, (size_t*)&length));
    // 下面是可以用的
    // uint8_t data[1024];
    // int length = 1024;
    // for(;;) {
    //     length = uart_read_bytes(UART_NUM_1, data, length, 100);
    //     vTaskDelay(200);
    //     printf("%s", data);
    // }
    

    // gptimer_handle_t gptimer = NULL;
    // gptimer_config_t config_rtc = {
    //     .clk_src = SOC_MOD_CLK_XTAL,
    //     .direction = GPTIMER_COUNT_UP,
    //     .resolution_hz = 10,
    // };
    // ESP_ERROR_CHECK(gptimer_new_timer(&config_rtc, &gptimer));
    // printf("OK!\r\n");

    // uint64_t nowtime = 0;
    // for(;;) {
    //     gptimer_get_raw_count(gptimer, &nowtime);
    //     printf("nowtime is %lld\r\n", nowtime);
    //     for(int k=40000000; k>0; k--);
    // }
    
}
